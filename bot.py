import telebot
from telebot import types
import time
from datetime import datetime
from apscheduler.schedulers.background import BackgroundScheduler
import os
from dotenv import load_dotenv
import database

load_dotenv()

# Initialize database
database.init_db()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
scheduler = BackgroundScheduler()
scheduler.start()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
users = {}

# –°—Ç—Ä—É–∫—Ç—É—Ä–∞, —Ö—Ä–∞–Ω—è—â–∞—è –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
class User:
    def __init__(self, chat_id):
        self.chat_id = chat_id
        self.message_time_morning = None
        self.message_time_evening = None
        self.survey_data = []
        self.tips_received = []
        self.tips_sent = 0
        self.survey_in_progress = False
        self.current_survey_step = 0
        self.current_survey_data = {}

bot = telebot.TeleBot(os.getenv('BOT_TOKEN'))

# –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º polling
bot.remove_webhook()

@bot.message_handler(commands=['start'])
def start(message):
    first_contact(message)

# –ü–µ—Ä–≤–∞—è, –≥–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã. –í –Ω–µ–π –ø—Ä–æ–ø–∏—Å–∞–Ω "–ø–µ—Ä–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç" —Å –±–æ—Ç–æ–º
@bot.message_handler(content_types=['text'])
def first_contact(message):
    chat_id = message.chat.id
    if (message.text == '–ü—Ä–∏–≤–µ—Ç!') or (message.text == '/start'):
        if chat_id not in users:
            users[chat_id] = User(chat_id)
        user = users[chat_id]
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item = types.KeyboardButton('–ö—Ç–æ —Ç—ã? üòØ')
        markup.add(item)
        bot.send_message(chat_id, '–ü—Ä–∏–≤–µ—Ç!', reply_markup=markup)
        bot.register_next_step_handler(message, information)
    elif message.text == '/menu':
        menu(message)
    elif message.text == '–î–∞' or message.text == '–ù–µ—Ç':
        survey_handler(message)
    else:
        user = users.get(chat_id)
        if user is None:
            bot.send_message(chat_id, '–ù–∞–ø–∏—à–∏ "–ü—Ä–∏–≤–µ—Ç!" –∏–ª–∏ "/start"')
        else:
            bot.send_message(chat_id, '–ù–∞–ø–∏—à–∏ "/menu"')
        bot.register_next_step_handler(message, first_contact)

# –§—É–Ω–∫—Ü–∏—è, –≤ –∫–æ—Ç–æ—Ä–æ–π –æ–ø–∏—Å–∞–Ω –ø–µ—Ä–≤—ã–π –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º, –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å –Ω–∏–º
def information(message):
    chat_id = message.chat.id
    if message.text == '–ö—Ç–æ —Ç—ã? üòØ':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item = types.KeyboardButton('–•–º, –∏ –∫–∞–∫ –º—ã —ç—Ç–æ–≥–æ –¥–æ–±—å–µ–º—Å—è?')
        markup.add(item)
        bot.send_message(chat_id,
                         '–Ø, Sweat_sleep –±–æ—Ç, –ø–æ–º–æ–≥–∞—é—â–∏–π —Ä–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å–æ —Å–Ω–æ–º üò¥ \n\n'
                         '–Ø –Ω–∞—É—á—É —Ç–µ–±—è –ª–µ–≥–∫–æ –ø—Ä–æ—Å—ã–ø–∞—Ç—å—Å—è, –±—ã—Å—Ç—Ä–æ –∑–∞—Å—ã–ø–∞—Ç—å –∏ –∫—Ä–µ–ø–∫–æ —Å–ø–∞—Ç—å. \n\n'
                         '–°–æ –º–Ω–æ–π —Ç—ã –ø–æ–¥–Ω–∏–º–µ—à—å —É—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏, —É–∑–Ω–∞–µ—à—å, —á—Ç–æ —Ç–∞–∫–æ–µ "–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ", '
                         '—Å–Ω–∏–∑–∏—à—å —É—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–≤–æ–≥–∏ –∏ –∑–∞–±—É–¥–µ—à—å –æ —Å–∏–Ω—è–∫–∞—Ö –ø–æ–¥ –≥–ª–∞–∑–∞–º–∏ üòÑ',
                         reply_markup=markup)
        bot.register_next_step_handler(message, information)
    elif message.text == '–•–º, –∏ –∫–∞–∫ –º—ã —ç—Ç–æ–≥–æ –¥–æ–±—å–µ–º—Å—è?':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item = types.KeyboardButton('–ü–æ–Ω—è—Ç–Ω–æ üòä–ß—Ç–æ –≤–æ-–≤—Ç–æ—Ä—ã—Ö?')
        markup.add(item)
        bot.send_message(chat_id,
                         '–Ø –ø–æ–¥—Ö–æ–∂—É –∫ —Ä–µ—à–µ–Ω–∏—é –ø—Ä–æ–±–ª–µ–º—ã –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ \n\n'
                         '–í–æ-–ø–µ—Ä–≤—ã—Ö, —è —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—é –æ —Ç–æ–º, –∫–∞–∫ —É—Å—Ç—Ä–æ–µ–Ω —Å–æ–Ω –∏ —á—Ç–æ –Ω–∞ –Ω–µ–≥–æ –≤–ª–∏—è–µ—Ç. \n\n'
                         '–í–Ω—É—Ç—Ä–∏ 5 —Å–æ–≤–µ—Ç–æ–≤ –æ —Å–Ω–µ, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞ –Ω–∞—É—á–Ω—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è—Ö, —Å—Ç–∞—Ç—å—è—Ö —Å–æ–º–Ω–æ–ª–æ–≥–æ–≤, '
                         '–∫–Ω–∏–≥–∞—Ö –æ —Å–Ω–µ –∏ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–º –æ–ø—ã—Ç–µ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–π üôÉ \n\n'
                         '–ù–∞ —ç—Ç–æ —Ç–µ–±–µ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –≤—Å–µ–≥–æ –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏: –º–∏–Ω—É—Ç–∫—É –Ω–∞ –ø—Ä–æ—á—Ç–µ–Ω–∏–µ \n'
                         '–°–æ–≤–µ—Ç—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–º–æ–≥—É—Ç —Ç–µ–±–µ —É–ª—É—á—à–∏—Ç—å —Å–≤–æ–π —Å–æ–Ω!',
                         reply_markup=markup)
        bot.register_next_step_handler(message, information)
    elif message.text == '–ü–æ–Ω—è—Ç–Ω–æ üòä–ß—Ç–æ –≤–æ-–≤—Ç–æ—Ä—ã—Ö?':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item = types.KeyboardButton('–î–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å üëç')
        markup.add(item)
        bot.send_message(chat_id,
                         '–í–æ-–≤—Ç–æ—Ä—ã—Ö, —è –ø–æ–º–æ–≥–∞—é –≤—ã—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –¥–ª—è —Å–Ω–∞ –ø—Ä–∏–≤—ã—á–∫–∏ –∏ –∏–∑–±–∞–≤–∏—Ç—å—Å—è –æ—Ç –≤—Ä–µ–¥–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫. \n\n'
                         '–°–æ–±–ª—é–¥–∞—è –∏—Ö —Ç—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–ª—É—á—à–∏—à—å —Å–≤–æ–π —Å–æ–Ω!\n\n'
                         '–ö–∞–ø–µ–ª—å–∫–∞ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã, –∫–æ—Ç–æ—Ä–∞—è –Ω–µ –ø–æ–º–µ—à–∞–µ—Ç üòè',
                         reply_markup=markup)
        bot.register_next_step_handler(message, information)
    elif message.text == '–î–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å üëç':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item = types.KeyboardButton('–•–æ—Ä–æ—à–æ. –í—ã–¥–µ–ª—é –≤—Ä–µ–º—è!')
        markup.add(item)
        bot.send_message(chat_id,
                         '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –±—É–¥–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ: \n\n'
                         '–í–µ—á–µ—Ä\nüìã –í–µ—á–µ—Ä–Ω–∏–π —Å–æ–≤–µ—Ç\nüí§ —Å–ª–∞–¥–∫–∏–π —Å–æ–Ω\n\n'
                         '–£—Ç—Ä–æ\nüìã —É—Ç—Ä–µ–Ω–Ω—è—è –∞–Ω–∫–µ—Ç–∞\n‚òÄÔ∏è –±–æ–¥—Ä—ã–π –¥–µ–Ω—å\n\n'
                         '–ò—Ç–æ–≥–æ: –º–∏–Ω—É—Ç–∫—É –≤–µ—á–µ—Ä–æ–º –∏ 2 –º–∏–Ω—É—Ç—ã —É—Ç—Ä–æ–º, —á—Ç–æ–±—ã –Ω–∞–ª–∞–¥–∏—Ç—å —Å–æ–Ω.',
                         reply_markup=markup)
        bot.register_next_step_handler(message, chose_time)
    else:
        bot.send_message(chat_id, '–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É!')
        bot.register_next_step_handler(message, information)

flag = True
flag_again = False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ —Ñ–æ—Ä–º–∞—Ç–∞ –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
def valid_time_format(time_str):
    try:
        time.strptime(time_str, '%H:%M')
        return True
    except ValueError:
        return False

# –ü–µ—Ä–≤—ã—è –∏–∑ –¥–≤—É—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–æ—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏–π
def chose_time(message):
    global flag, flag_again
    chat_id = message.chat.id
    if message.text == '–•–æ—Ä–æ—à–æ. –í—ã–¥–µ–ª—é –≤—Ä–µ–º—è!' or flag_again or message.text == '–ù–∞—á–Ω—ë–º':
        flag_again = False
        flag = True
        bot.send_message(chat_id, '–î–∞–≤–∞–π –Ω–∞—Å—Ç—Ä–æ–∏–º –≤—Ä–µ–º—è –ø—Ä–∏—Ö–æ–¥–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ‚è∞ \n\n'
                         '–í –∫–∞–∫–æ–π —á–∞—Å –ø–æ –ú–æ—Å–∫–≤–µ —Ç–µ–±–µ —É–¥–æ–±–Ω–æ –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –£–¢–†–û–ú? üåÖ \n\n'
                         '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM.')
        bot.register_next_step_handler(message, chose_time_2)
    else:
        bot.send_message(chat_id, '–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É!')
        bot.register_next_step_handler(message, chose_time)

# –í—Ç–æ—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–æ—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏–π
def chose_time_2(message):
    global flag, flag_again
    chat_id = message.chat.id
    user = users[chat_id]
    if valid_time_format(message.text):
        if flag:
            user.message_time_morning = message.text
            flag = False
            bot.send_message(chat_id, '–í –∫–∞–∫–æ–π —á–∞—Å –ø–æ –ú–æ—Å–∫–≤–µ —Ç–µ–±–µ —É–¥–æ–±–Ω–æ –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –í–ï–ß–ï–†–û–ú? üåÉ \n\n'
                             '–°–æ–≤–µ—Ç—É—é –≤—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è –∑–∞ 1-2 —á–∞—Å–∞ –¥–æ —Å–Ω–∞, —á—Ç–æ–±—ã —É—Å–ø–µ—Ç—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —É—Ä–æ–∫–∞. \n\n'
                             '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM.')
            bot.register_next_step_handler(message, chose_time_2)
        else:
            user.message_time_evening = message.text
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å‚úÖ')
            item2 = types.KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å')
            markup.add(item1, item2)
            bot.send_message(chat_id, f'–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è? \n\nüåû –£—Ç—Ä–æ - {user.message_time_morning} \nüåö –í–µ—á–µ—Ä - {user.message_time_evening}',
                             reply_markup=markup)
            bot.register_next_step_handler(message, save_time)
    else:
        bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑. –Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª')
        bot.register_next_step_handler(message, chose_time_2)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤—Ä–µ–º–µ–Ω–∏
def save_time(message):
    global flag_again
    chat_id = message.chat.id
    user = users[chat_id]
    if message.text == '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å‚úÖ':
        # Check if user exists in database
        existing_user = database.get_user(chat_id)
        if existing_user:
            # Update existing user's times
            database.update_user_times(chat_id, user.message_time_morning, user.message_time_evening)
        else:
            # Add new user
            database.add_user(chat_id, user.message_time_morning, user.message_time_evening)
        bot.send_message(chat_id, '–°—É–ø–µ—Ä. –í—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')
        schedule_user_messages(user)
        bot.send_message(chat_id, '–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—é, –Ω–∞–ø–∏—à–∏—Ç–µ /menu')
    elif message.text == '–ò–∑–º–µ–Ω–∏—Ç—å':
        flag_again = True
        chose_time(message)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –æ–±—Ä–∞—Ç–Ω–æ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –≤—Ä–µ–º–µ–Ω–∏
    else:
        bot.send_message(chat_id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.')
        bot.register_next_step_handler(message, save_time)

# –§—É–Ω—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –±–æ—Ç–∞
def schedule_user_messages(user):
    # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        scheduler.remove_job(str(user.chat_id) + '_morning')
    except:
        pass
    try:
        scheduler.remove_job(str(user.chat_id) + '_evening')
    except:
        pass

    # –ü–ª–∞–Ω–∏—Ä—É–µ–º —É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    morning_hour, morning_minute = map(int, user.message_time_morning.split(':'))
    scheduler.add_job(send_morning_message, 'cron',
                      hour=morning_hour, minute=morning_minute,
                      args=[user.chat_id],
                      id=str(user.chat_id) + '_morning')

    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –≤–µ—á–µ—Ä–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    evening_hour, evening_minute = map(int, user.message_time_evening.split(':'))
    scheduler.add_job(send_evening_message, 'cron',
                      hour=evening_hour, minute=evening_minute,
                      args=[user.chat_id],
                      id=str(user.chat_id) + '_evening')

# –ù–∞—á–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É—Ç—Ä–µ–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
def send_morning_message(chat_id):
    user = users.get(chat_id)
    if user:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        item_yes = types.KeyboardButton('–î–∞')
        item_no = types.KeyboardButton('–ù–µ—Ç')
        markup.add(item_yes, item_no)
        bot.send_message(chat_id, '–ü—Ä–∏–≤–µ—Ç! –õ–æ–≤–∏ —É—Ç—Ä–µ–Ω–Ω—é—é –∞–Ω–∫–µ—Ç—É üòä\n–í—ã –≥–æ—Ç–æ–≤—ã –ø—Ä–æ–π—Ç–∏ –∞–Ω–∫–µ—Ç—É?', reply_markup=markup)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∞–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def survey_handler(message):
    chat_id = message.chat.id
    user = users[chat_id]
    if message.text == '–î–∞':
        user.current_survey_step = 1
        user.current_survey_data = {}
        ask_survey_question(message)
    else:
        bot.send_message(chat_id, '–•–æ—Ä–æ—à–æ, –º–æ–∂–µ—Ç –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!')
        user.survey_in_progress = False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –æ–ø—Ä–æ—Å–∞
def ask_survey_question(message):
    chat_id = message.chat.id
    user = users[chat_id]
    if user.current_survey_step == 1:
        bot.send_message(chat_id, '–í—Ä–µ–º—è –ø–æ–¥—ä–µ–º–∞ (—á–∞—Å—ã):')
        bot.register_next_step_handler(message, survey_response)
    elif user.current_survey_step == 2:
        bot.send_message(chat_id, '–í—Ä–µ–º—è –ø–æ–¥—ä–µ–º–∞ (–º–∏–Ω—É—Ç—ã):')
        bot.register_next_step_handler(message, survey_response)
    elif user.current_survey_step == 3:
        bot.send_message(chat_id, '–í—Ä–µ–º—è –æ—Ç—Ö–æ–¥–∞ –∫–æ —Å–Ω—É (—á–∞—Å—ã):')
        bot.register_next_step_handler(message, survey_response)
    elif user.current_survey_step == 4:
        bot.send_message(chat_id, '–í—Ä–µ–º—è –æ—Ç—Ö–æ–¥–∞ –∫–æ —Å–Ω—É (–º–∏–Ω—É—Ç—ã):')
        bot.register_next_step_handler(message, survey_response)
    elif user.current_survey_step == 5:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        item1 = types.KeyboardButton('üëç')
        item2 = types.KeyboardButton('üëå')
        item3 = types.KeyboardButton('üëé')
        markup.add(item1, item2, item3)
        bot.send_message(chat_id, '–û—Ü–µ–Ω–∏ –ª–µ–≥–∫–æ—Å—Ç—å –ø–æ–¥—ä–µ–º–∞', reply_markup=markup)
        bot.register_next_step_handler(message, survey_response)
    elif user.current_survey_step == 6:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        item1 = types.KeyboardButton('–ë—ã—Å—Ç—Ä–æ')
        item2 = types.KeyboardButton('–°—Ä–µ–¥–Ω–µ')
        item3 = types.KeyboardButton('–î–æ–ª–≥–æ')
        markup.add(item1, item2, item3)
        bot.send_message(chat_id, '–ë—ã—Å—Ç—Ä–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∑–∞—Å–Ω—É—Ç—å?', reply_markup=markup)
        bot.register_next_step_handler(message, survey_response)
    elif user.current_survey_step == 7:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        item1 = types.KeyboardButton('üòÄ')
        item2 = types.KeyboardButton('üòä')
        item3 = types.KeyboardButton('üòê')
        item4 = types.KeyboardButton('üòí')
        item5 = types.KeyboardButton('üòñ')
        markup.add(item1, item2, item3, item4, item5)
        bot.send_message(chat_id, '–ö–∞–∫ —Ç–≤–æ–π –Ω–∞—Å—Ç—Ä–æ–π –Ω–∞ –¥–µ–Ω—å?', reply_markup=markup)
        bot.register_next_step_handler(message, survey_response)
    elif user.current_survey_step == 8:
        bot.send_message(chat_id, '–°—É–ø–µ—Ä! –ö—Ä—É—Ç–æ–≥–æ —Ç–µ–±–µ –¥–Ω—è ü§©')
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã
        user.survey_data.append(user.current_survey_data)
        user.survey_in_progress = False
        bot.send_message(chat_id, '–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—é, –Ω–∞–ø–∏—à–∏—Ç–µ /menu')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∏—Ö –æ–ø—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã–π. –∞ —Ç–∞–∫–∂–µ –¥–ª—è –ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞
def survey_response(message):
    chat_id = message.chat.id
    user = users[chat_id]
    step = user.current_survey_step
    response = message.text
    if step == 1:
        if response.isdigit() and 0 <= int(response) <= 23:
            user.current_survey_data['wake_hour'] = int(response)
            user.current_survey_step += 1
            ask_survey_question(message)
        else:
            bot.send_message(chat_id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∞—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ –æ—Ç 0 –¥–æ 23.')
            bot.register_next_step_handler(message, survey_response)
    elif step == 2:
        if response.isdigit() and 0 <= int(response) <= 59:
            user.current_survey_data['wake_minute'] = int(response)
            user.current_survey_step += 1
            ask_survey_question(message)
        else:
            bot.send_message(chat_id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –º–∏–Ω—É—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –æ—Ç 0 –¥–æ 59.')
            bot.register_next_step_handler(message, survey_response)
    elif step == 3:
        if response.isdigit() and 0 <= int(response) <= 23:
            user.current_survey_data['sleep_hour'] = int(response)
            user.current_survey_step += 1
            ask_survey_question(message)
        else:
            bot.send_message(chat_id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∞—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ –æ—Ç 0 –¥–æ 23.')
            bot.register_next_step_handler(message, survey_response)
    elif step == 4:
        if response.isdigit() and 0 <= int(response) <= 59:
            user.current_survey_data['sleep_minute'] = int(response)
            user.current_survey_step += 1
            ask_survey_question(message)
        else:
            bot.send_message(chat_id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –º–∏–Ω—É—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –æ—Ç 0 –¥–æ 59.')
            bot.register_next_step_handler(message, survey_response)
    elif step == 5:
        if response in ['üëç', 'üëå', 'üëé']:
            user.current_survey_step += 1
            ask_survey_question(message)
        else:
            bot.send_message(chat_id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.')
            bot.register_next_step_handler(message, survey_response)
    elif step == 6:
        if response in ['–ë—ã—Å—Ç—Ä–æ', '–°—Ä–µ–¥–Ω–µ', '–î–æ–ª–≥–æ']:
            user.current_survey_step += 1
            ask_survey_question(message)
        else:
            bot.send_message(chat_id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.')
            bot.register_next_step_handler(message, survey_response)
    elif step == 7:
        if response in ['üòÄ', 'üòä', 'üòê', 'üòí', 'üòñ']:
            # Save current day's wake up time
            wake_up_time = f"{user.current_survey_data['wake_hour']:02d}:{user.current_survey_data['wake_minute']:02d}"
            database.add_record(chat_id, wake_up_time, None)  # sleep_time is None for current day
            
            # Update previous day's sleep time if it exists
            sleep_time = f"{user.current_survey_data['sleep_hour']:02d}:{user.current_survey_data['sleep_minute']:02d}"
            database.update_previous_day_sleep_time(chat_id, sleep_time)
            
            user.current_survey_step += 1
            ask_survey_question(message)
        else:
            bot.send_message(chat_id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.')
            bot.register_next_step_handler(message, survey_response)
    elif step == 8:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã
        user.survey_data.append(user.current_survey_data)
        user.survey_in_progress = False
        bot.send_message(chat_id, '–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—é, –Ω–∞–ø–∏—à–∏—Ç–µ /menu')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–∞–≤–∫–∏ –≤–µ—á–µ—Ä–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
def send_evening_message(chat_id):
    user = users.get(chat_id)
    if user and user.tips_sent < 5:
        tip = get_sleep_tip(user.tips_sent)
        bot.send_message(chat_id, f'–°–æ–≤–µ—Ç –¥–ª—è —Å–Ω–∞: \n{tip}')
        user.tips_received.append(tip)
        user.tips_sent += 1
        bot.send_message(chat_id, '–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—é, –Ω–∞–ø–∏—à–∏—Ç–µ /menu')
    else:
        bot.send_message(chat_id, '–°–æ–≤–µ—Ç—ã –∫–æ–Ω—á–∏–ª–∏—Å—å. –ù–æ —Å–∫–æ—Ä–æ –±—É–¥—É—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è!')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–æ–≤–µ—Ç–∞ –¥–ª—è –≤–µ—á–µ—Ä–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
def get_sleep_tip(index):
    tips = [
        "–°–æ–≤–µ—Ç 1: –ò–∑–±–µ–≥–∞–π—Ç–µ —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –∫–æ—Ñ–µ–∏–Ω–∞ –ø–µ—Ä–µ–¥ —Å–Ω–æ–º.",
        "–°–æ–≤–µ—Ç 2: –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ —Å–Ω–∞.",
        "–°–æ–≤–µ—Ç 3: –°–æ–∑–¥–∞–π—Ç–µ –∫–æ–º—Ñ–æ—Ä—Ç–Ω—É—é –æ–±—Å—Ç–∞–Ω–æ–≤–∫—É –¥–ª—è —Å–Ω–∞.",
        "–°–æ–≤–µ—Ç 4: –ò–∑–±–µ–≥–∞–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≥–∞–¥–∂–µ—Ç–æ–≤ –ø–µ—Ä–µ–¥ —Å–Ω–æ–º.",
        "–°–æ–≤–µ—Ç 5: –†–∞—Å—Å–ª–∞–±—å—Ç–µ—Å—å –ø–µ—Ä–µ–¥ —Å–Ω–æ–º —Å –ø–æ–º–æ—â—å—é –º–µ–¥–∏—Ç–∞—Ü–∏–∏ –∏–ª–∏ —á—Ç–µ–Ω–∏—è."
    ]
    if index < len(tips):
        return tips[index]
    else:
        return "–ù–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–æ–≤–µ—Ç–æ–≤."

# –ú–µ–Ω—é
@bot.message_handler(commands=['menu'])
def menu(message):
    chat_id = message.chat.id
    user = users.get(chat_id)
    if user is None:
        bot.send_message(chat_id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ "–ü—Ä–∏–≤–µ—Ç!" –∏–ª–∏ "/start" —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.')
    else:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton('–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–Ω–∞')
        item2 = types.KeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Å–æ–≤–µ—Ç–æ–≤ –¥–ª—è —Å–Ω–∞')
        item3 = types.KeyboardButton('–ü–æ–º–µ–Ω—è—Ç—å –∂–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π')
        markup.add(item1)
        markup.add(item2)
        markup.add(item3)
        bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=markup)
        bot.register_next_step_handler(message, menu_selection)

# –í—ã–±–æ—Ä –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
def menu_selection(message):
    chat_id = message.chat.id
    user = users.get(chat_id)
    if message.text == '–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–Ω–∞':
        stats = get_sleep_statistics(user)
        bot.send_message(chat_id, stats)
        bot.register_next_step_handler(message, menu_selection)
    elif message.text == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Å–æ–≤–µ—Ç–æ–≤ –¥–ª—è —Å–Ω–∞':
        tips = '\n'.join(user.tips_received)
        if tips:
            bot.send_message(chat_id, '–í–∞—à–∏ —Å–æ–≤–µ—Ç—ã –¥–ª—è —Å–Ω–∞:\n' + tips)
        else:
            bot.send_message(chat_id, '–í—ã –µ—â–µ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–æ–≤–µ—Ç–∞.')
        bot.register_next_step_handler(message, menu_selection)
    elif message.text == '–ü–æ–º–µ–Ω—è—Ç—å –∂–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item = types.KeyboardButton('–ù–∞—á–Ω—ë–º')
        markup.add(item)
        bot.send_message(chat_id, '–î–∞–≤–∞–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏–º –≤—Ä–µ–º—è —Å–Ω–æ–≤–∞.', reply_markup=markup)
        bot.register_next_step_handler(message, chose_time)
    else:
        bot.send_message(chat_id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.')
        bot.register_next_step_handler(message, menu_selection)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –µ—ë –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –≤—ã–≤–æ–¥–∞
def get_sleep_statistics(user):
    records = database.get_user_records(user.chat_id)
    if not records:
        return '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.'
    else:
        total_entries = len(records)
        stats = f'–í—ã –ø—Ä–æ—à–ª–∏ –∞–Ω–∫–µ—Ç—É {total_entries} —Ä–∞–∑(–∞).\n\n'

        # —Ä–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–¥—ä–µ–º–∞ –∏ —Å–Ω–∞
        wake_times = []
        sleep_times = []
        for record in records:
            wake_time = record[2]  # wake_up_time is at index 2
            sleep_time = record[3]  # asleep_time is at index 3
            record_date = record[4]  # record_date is at index 4
            
            # Calculate wake time in minutes
            hour, minute = map(int, wake_time.split(':'))
            wake_times.append(hour * 60 + minute)
            
            # Calculate sleep time in minutes
            if sleep_time:
                hour, minute = map(int, sleep_time.split(':'))
                sleep_times.append(hour * 60 + minute)
            
            stats += f'–î–∞—Ç–∞: {record_date}\n'
            stats += f'–í—Ä–µ–º—è –ø–æ–¥—ä–µ–º–∞: {wake_time}\n'
            if sleep_time:
                stats += f'–í—Ä–µ–º—è –æ—Ç—Ö–æ–¥–∞ –∫–æ —Å–Ω—É: {sleep_time}\n'
            stats += '\n'
        
        # Calculate average wake time
        avg_wake_time = sum(wake_times) / total_entries
        avg_hour = int(avg_wake_time // 60)
        avg_minute = int(avg_wake_time % 60)
        stats += f'–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø–æ–¥—ä–µ–º–∞: {avg_hour:02d}:{avg_minute:02d}\n'
        
        # Calculate average sleep time if available
        if sleep_times:
            avg_sleep_time = sum(sleep_times) / len(sleep_times)
            avg_hour = int(avg_sleep_time // 60)
            avg_minute = int(avg_sleep_time % 60)
            stats += f'–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç—Ö–æ–¥–∞ –∫–æ —Å–Ω—É: {avg_hour:02d}:{avg_minute:02d}\n'

        return stats

if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    bot.infinity_polling()